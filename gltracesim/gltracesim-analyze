#!/usr/bin/env python

import json
import os, os.path
import shutil
import subprocess

def parse_arguments():
    from argparse import ArgumentParser

    parser = ArgumentParser('gltracesim-analyze')
    option = parser.add_argument

    option("-i", "--input-dir",
        default='in',
        help="Input dir."
    )

    option("-f", "--start-frame", 
        default=0,
        type=int,
        help="Fast forward N frames."
    )

    option("-w", "--stop-frame", 
        default=10**6,
        type=int,
        help="Frame to stop at."
    )

    option("-d", "--debug-flags", 
        default=[],
        nargs='*',
        help="Debug event flags."
    )

    option("--debug-level", 
        default=0,
        type=int,
        help="Debug level."
    )

    option("--stop-time", 
        default=0,
        type=int,
        help="Number of seconds to stop after."
    )

    option("-m", "--models", 
        default=None,
        help="Models parameter file."
    )

    option("-n", "--num-gpu-cores",
        default=1,
        type=int,
        help="Number of GPU cores."
    )

    option("--use-rsc-sync",
        default=1,
        type=int,
        help="Sync resources between CPU/GPU."
    )

    option("--use-global-sync",
        default=1,
        type=int,
        help="Sync (global barriers) between CPU/GPU."
    )

    option("-o", "--output-dir", 
        default='out/',
        help="Output directory."
    )

    option("-s", "--schedular",
        default='fcfs',
        choices=['fcfs', 'z', 'r'],
        help="Task schedular."
    )

    option("--z-width",
        default=-1,
        type=int,
        help="Number of tiles to Z schedule."
    )

    option("--gdb", 
        default=False,
        action='store_true',
        help="Run with GDB."
    )

    option("--valgrind",
        default=False,
        action='store_true',
        help="Run with valgrind."
    )

    option("--strace",
        default=False,
        action='store_true',
        help="Run with strace."
    )

    return parser.parse_known_args()

args, other_args = parse_arguments()

#
def main():

    debug_flags = []
    for flag in args.debug_flags:
        debug_flags.extend(flag.split(','))

    input_dir = os.path.realpath(args.input_dir)

    # Build configuration
    config = {

        "input-dir": input_dir,
        "benchmark-name": os.path.split(input_dir)[-1],

        "start-frame": args.start_frame,
        "stop-frame": args.stop_frame,

        "stop-time": args.stop_time,

        "num-gpu-cores": args.num_gpu_cores,

        "use-rsc-sync": args.use_rsc_sync,
        "use-global-sync": args.use_global_sync,

        "schedular": {
            "type": args.schedular,
            "z-width": args.z_width,
        },

        "debug": {
            "enable": 1 if len(debug_flags) > 0 else 0,
            "flags": debug_flags,
            "level": args.debug_level,
        },
    }

    # Merge models file
    config["models"] = []
    if args.models:
        models = args.models.split(',')
        for filename in models:
            filename = os.path.realpath(filename)
            print "Merging models from %s." % filename
            with open(filename, "r") as f:
                config["models"].extend(json.load(f))

    # Fix id
    for i, model in enumerate(config["models"]):
        model["id"] = i


    # Make output directories
    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)


    shutil.copy(
        os.path.join(args.input_dir, "stats.pb.gz"),
        os.path.join(args.output_dir, "orig.stats.pb.gz")
    )
    shutil.copy(
        os.path.join(args.input_dir, "resources.pb.gz"),
        os.path.join(args.output_dir, "orig.resources.pb.gz")
    )
    shutil.copy(
        os.path.join(args.input_dir, "frames.pb.gz"),
        os.path.join(args.output_dir, "orig.frames.pb.gz")
    )
    shutil.copy(
        os.path.join(args.input_dir, "scenes.pb.gz"),
        os.path.join(args.output_dir, "orig.scenes.pb.gz")
    )
    shutil.copy(
        os.path.join(args.input_dir, "jobs.pb.gz"),
        os.path.join(args.output_dir, "orig.jobs.pb.gz")
    )
    shutil.copy(
        os.path.join(args.input_dir, "opengl.pb.gz"),
        os.path.join(args.output_dir, "orig.opengl.pb.gz")
    )

    # Store configuration
    with open(os.path.join(args.output_dir, "config.json"), "w") as f:
        json.dump(config, f, indent=2, sort_keys=True)

    # Build command
    cmd = []

    if args.gdb:
        cmd += [ 'gdb', '--args' ]

    if args.valgrind:
        cmd += [ 'valgrind', '--leak-check=yes' ]

    if args.strace:
        cmd += [ 'strace', '-c' ]

    # cmd
    cmd += [
        #
        os.path.join(
            os.path.dirname(__file__),
            'gltracesim-analyze.o'
        ),

        # Out dir    
        args.output_dir,
    ] 

    # Use string instead of [], for server-flags
    cmd = ' '.join(cmd)

    #
    print cmd

    # Run gltracesim
    subprocess.call(cmd, shell=True)

if __name__ == "__main__":
    main()
